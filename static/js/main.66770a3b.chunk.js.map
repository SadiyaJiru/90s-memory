{"version":3,"sources":["components/CharactersCard/index.js","components/Wrapper/index.js","components/Title/index.js","components/ScoreBoard/ScoreBoard.js","App.js","index.js"],"names":["CharactersCard","props","react_default","a","createElement","class","onClick","charactersClicked","src","image","alt","Wrapper","className","children","Title","ScoreBoard","components_Title","this","highestScore","score","Component","App","state","characters","clicked","event","currentClick","target","_this","indexOf","setState","sort","b","Math","random","alert","concat","_this2","components_Wrapper","components_ScoreBoard_ScoreBoard","map","components_CharactersCard","id","name","key","ReactDOM","render","src_App","document","getElementById"],"mappings":"82pCAoBeA,MAXd,SAAyBC,GACxB,OACEC,EAAAC,EAAAC,cAAA,OAAKC,MAAM,cAAcC,QAASL,EAAMM,mBAExCL,EAAAC,EAAAC,cAAA,OAAKI,IAAKP,EAAMQ,MAAOC,IAAKT,EAAMQ,QAFlC,aCJWE,MAJf,SAAiBV,GACf,OAAOC,EAAAC,EAAAC,cAAA,OAAKQ,UAAU,WAAWX,EAAMY,iBCG1BC,MAJf,SAAeb,GACb,OAAOC,EAAAC,EAAAC,cAAA,MAAIQ,UAAU,SAASX,EAAMY,WCkBvBE,0LAZP,OACEb,EAAAC,EAAAC,cAAA,OAAKQ,UAAU,4BACfV,EAAAC,EAAAC,cAACY,EAAD,sCACGd,EAAAC,EAAAC,cAAA,UACCF,EAAAC,EAAAC,cAAA,MAAIQ,UAAU,cAAd,kBAA2CK,KAAKhB,MAAMiB,cACtDhB,EAAAC,EAAAC,cAAA,MAAIQ,UAAU,aAAd,UAAkCK,KAAKhB,MAAMkB,gBATlCC,qBC+GVC,6MAxGfC,MAAQ,CACPC,aACCC,QAAS,GACTL,MAAO,EACPD,aAAc,KAMhBX,kBAAoB,SAAAkB,GAEpB,IAAMC,EAAcD,EAAME,OAAOjB,IAMPkB,EAAKN,MAAME,QAAQK,QAAQH,IAAiB,GAGlEE,EAAKE,SAAS,CAEZP,WAAYK,EAAKN,MAAMC,WAAWQ,KAAM,SAAU5B,EAAE6B,GAClD,MAAO,GAAMC,KAAKC,WAEtBhB,aAAeU,EAAKN,MAAMH,MAAQS,EAAKN,MAAMJ,aAAgBU,EAAKN,MAAMH,MAAQS,EAAKN,MAAMJ,aAE3FM,QAAS,GACTL,MAAO,IAIXgB,MAAM,yBAIJP,EAAKE,SACH,CAEEP,WAAYK,EAAKN,MAAMC,WAAWQ,KAAK,SAAS5B,EAAG6B,GACjD,MAAO,GAAMC,KAAKC,WAGpBV,QAASI,EAAKN,MAAME,QAAQY,OAC1BV,GAGFP,MAAOS,EAAKN,MAAMH,MAAQ,GAI9B,WAEsB,KAArBS,EAAKN,MAAMH,OAKZS,EAAKE,SAAS,CAEZP,WAAYK,EAAKN,MAAMC,WAAWQ,KAAK,SAAS5B,EAAG6B,GACjD,MAAO,GAAMC,KAAKC,WAGpBhB,aAAeU,EAAKN,MAAMH,MAAQS,EAAKN,MAAMJ,aAAgBU,EAAKN,MAAMH,MAAQS,EAAKN,MAAMJ,aAE3FM,QAAS,GACTL,MAAO,+EAUA,IAAAkB,EAAApB,KACP,OACEf,EAAAC,EAAAC,cAACkC,EAAD,KACApC,EAAAC,EAAAC,cAACmC,EAAD,CACEpB,MAAOF,KAAKK,MAAMH,MAClBD,aAAeD,KAAKK,MAAMJ,eAG5BhB,EAAAC,EAAAC,cAAA,OAAKQ,UAAW,WACrBK,KAAKK,MAAMC,WAAWiB,IAAI,SAAAjB,GAAU,OACnCrB,EAAAC,EAAAC,cAACqC,EAAD,CACFlC,kBAAqB8B,EAAK9B,kBAC1BmC,GAAInB,EAAWmB,GACfC,KAAMpB,EAAWoB,KACjBC,IAAKrB,EAAWmB,GAEhBjC,MAAOc,EAAWd,mBAjGAW,mBCLlByB,IAASC,OAAO5C,EAAAC,EAAAC,cAAC2C,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.66770a3b.chunk.js","sourcesContent":["//This Comonent is used for displaying the characters cards onto the screen\nimport React from \"react\";\nimport \"./style.css\";\n\n//generate our BootStrap Card\n\n//the span has an onlcick event, give it the the ID of the Character that has been clicked\n            // <img alt={props.image} src={props.image} />\n\n function CharactersCard (props){\n  return(\n    <div class=\"card myCard\" onClick={props.charactersClicked}>\n  \n    <img src={props.image} alt={props.image} />  </div>\n    )\n }\n  \n   \n\n\nexport default CharactersCard;\n","import React from \"react\";\nimport \"./wrapper.css\";\n\nfunction Wrapper(props) {\n  return <div className=\"wrapper\">{props.children}</div>;\n}\n\nexport default Wrapper;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Title(props) {\n  return <h1 className=\"title\">{props.children}</h1>;\n}\n\nexport default Title;\n","import React, { Component } from \"react\";\nimport Title from \"../Title\";\n\nimport \"./score.css\";\n\n// By extending the React.Component class, Counter inherits functionality from it\nclass ScoreBoard extends Component {\n\n  // The render method returns the JSX that should be rendered\n  render() {\n        return (\n          <nav className=\"navbar  navbar-fixed-top\">\n          <Title>Test Your 90's Cartoon Memory</Title>\n             <ul>\n              <h2 className=\"itemCenter\">Highest Score: {this.props.highestScore}</h2>\n              <h2 className=\"itemRight\">Score: {this.props.score}</h2>\n            </ul>\n          </nav>\n        );\n      }\n    }\n\nexport default ScoreBoard;\n","//Top level container component\nimport React, { Component } from \"react\";\nimport CharacterCard from \"./components/CharactersCard\";\nimport Wrapper from \"./components/Wrapper\";\nimport ScoreBoard from \"./components/ScoreBoard/ScoreBoard\"\nimport characters from \"./characters.json\";\n\n//mock data from characters.json\n\n// \nclass App extends Component {\n           //delete  after class name App-header\n//initialize the default state , characters property on state object\nstate = {\n characters,\n  clicked: [],\n  score: 0,\n  highestScore: 0\n  \n};\n\n\n//a function that changes the characters state to \"clicked\" if clicked\ncharactersClicked = event =>{\n\nconst currentClick= event.target.alt;\n\n\n// alert(\"I was clicked\")\n\n//if the current click is equal to the one before, store it in previouslyClicked\nconst previouslyClicked = this.state.clicked.indexOf(currentClick) > -1;\n\nif (previouslyClicked){\n    this.setState({\n      //Images get shuffled around every you guess correct on a character\n      characters: this.state.characters.sort( function (a,b){\n        return 0.5 - Math.random();    \n    }),\n    highestScore: (this.state.score > this.state.highestScore) ? this.state.score : this.state.highestScore,\n\n    clicked: [],\n    score: 0,\n\n})\n\nalert(\"You lost, try again.\")\n\n//if you click on a character that has not been clicked \n}  else {\n  this.setState(\n    {\n      //shuffle the images randomly\n      characters: this.state.characters.sort(function(a, b) {\n        return 0.5 - Math.random();\n      }),\n      //\n      clicked: this.state.clicked.concat(\n        currentClick\n      ),\n      //incarament the score\n      score: this.state.score + 1\n     \n    },\n    //if you get them all right without double clicking \n  () =>{\n    //if guess all 12 images correctly you win\nif(this.state.score === 15){\n\n  // alert(`you win`);\n\n  //Reset the game\n  this.setState({\n\n    characters: this.state.characters.sort(function(a, b) {\n      return 0.5 - Math.random();\n\n    }),\n    highestScore: (this.state.score > this.state.highestScore) ? this.state.score : this.state.highestScore,\n\n    clicked: [],\n    score: 0\n});\n  }\n  });\n}\n};\n\n//render methond that renders the top level componenet of Wrapper\n//Wrapper will render a title, use .map to create an array of all the characters in the clicked state\n//for each Character we want to generate a CharacterCard and pass in the charactersClicked method from above\n  render() {\n    return (\n      <Wrapper>\n      <ScoreBoard \n        score={this.state.score}\n        highestScore ={this.state.highestScore}\n\n      />\n      <div className =\"wrapper\">\n{this.state.characters.map(characters =>(\n  <CharacterCard\ncharactersClicked = {this.charactersClicked}\nid={characters.id}\nname={characters.name}\nkey={characters.id}\n// name={character.name}\nimage={characters.image}\n/>\n\n))}\n</div>\n</Wrapper>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}